Script started on Wed Nov 25 12:11:29 2015
admiral% car t bjh3A.cpp
// Ben Haase
// 12/2/15
// CS3130 project 3 part A
// Building a BST and implementations of various BST functions

#include <iostream>
#include <cstdlib>
using namespace std;

struct node{
        node * left;
        node * right;
        int key;
};

struct bst{
        node * root;
        int n;
};

bst * buildTree(int *, int);
void insert(bst*, int);
node * search(node *, int);
void deleteNode(bst *, int);
node * minValue(node *);
int height(node *);
void inOrderPrint(node *);
void postOrderPrint(node *);
void preOrderPrint(node *);
void traversals(bst *);
void menu();
int main(int argc, char* argv[])
{
        menu();

        return 0;
}

//function to build a tree from an array
bst * buildTree(int * a, int n){
        bst * x = new bst;
        x->root = NULL;
        x->n = 0;
        for (int i = 0; i < n; i++){
                insert(x, a[i]);
        }
        return x;
}

//function to insert a node into the BST
void insert(bst * x, int a){
        node * s = x->root;
        node * p = NULL;
        if (x->root != NULL){
                while (s != NULL){
                        p = s;
                        if (s->key > a){
                                s = s->left;
                        }
                        else{
                                s = s->right;
                        }
                }
                node * t= new node;
                t->right = NULL;
                t->left = NULL;
                t->key = a;
                if (p->key > a) p->left = t;
                else p->right = t;
        }
        else { 
                x->root = new node;
                x->root->key = a;
                x->root->left = NULL;
                x->root->right = NULL;
        }
        x->n = x->n + 1;
}

//function to determine is a value is in the BST and return its memory location
node * search(node * x, int a){
        cout << "Search: ";
        while (x != NULL){
                if (x->key == a) cout << x->key << endl;
                else cout << x->key << " -> ";
                if (x->key == a) return x;
                else if (a < x->key) x = x->left;
                else x = x->right;
        }
        cout << endl;
        return x;
}

//function to find node to be deleted and perform correct operation to delete it
void deleteNode(bst * t, int a){
        node * x = t->root;
        node * p = NULL;
        node * m = NULL;
        while (x != NULL){
                if (x->key == a){
                        if (p == NULL){ //root
                                if (x->right == NULL && x->left == NULL){
                                        m = minValue(x);
                                        t->root = NULL;
                                        x->key = 0;
                                        delete x;
                                }
                                else m = minValue(x);
                        }
                        else if (x->right != NULL || x->left != NULL){ //full node
                                if (p->right == x){
                                        m = minValue(x);
                                        p->right = m;
                                }
                                else {
                                        m = minValue(x);
                                        p->left = m;
                                }
                        }
                        else{ //leaf node
                                if (x == p->left) p->left = NULL;
                                else p->right = NULL;
                                if (x != NULL){
                                        x->left = NULL;
                                        x->right = NULL;
                                        x->key = 0;
                                }
                                delete x;
                        }
                        t->n = t->n - 1;
                        break;
                }

                p = x;
                if (a < x->key) x = x->left;
                else x = x->right;
        }
        x = p = m = NULL;
}

//function to determine node to take place of node to be deleted, and deal with children
node * minValue(node * x){
        node * p = NULL;
        node * f = NULL;
        if (x->right != NULL){ 
                p = x;
                f = x->right;
                if (f->left != NULL){
                        while (f->left != NULL){
                                p = f;
                                f = f->left;
                        }
                        x->key = f->key;
                        p->left = f->right;
                        p = x;
                }
                else{
                        p->right = f->right;
                        p->key = f->key;
                        p = x;
                }
        }
        else if (x->left != NULL){
                p = x;
                f = p->left;
                p->left = f->left;
                p->right = f->right;
                p->key = f->key;
        }
        if (f != NULL){
                f->left = NULL;
                f->right = NULL;
                f->key = 0;
        }
        delete f;
        return p;
}

//function to find the height of the bst
int height(node * x){
        int c = 1;
        int d = 1;
        if(x->left != NULL) c += height(x->left);
        if (x->right != NULL) d += height(x->right);
        if (c > d) return c;
        else return d;
}

//BST print functions
void inOrderPrint(node * x){
        if (x != NULL){
                inOrderPrint(x->left);
                cout << x->key << " ";
                inOrderPrint(x->right);
        }
}

void postOrderPrint(node * x){
        if (x != NULL){
                postOrderPrint(x->left);
                postOrderPrint(x->right);
                cout << x->key << " ";
        }
}

void preOrderPrint(node * x){
        if (x != NULL){
                cout << x->key << " ";
                preOrderPrint(x->left);
                preOrderPrint(x->right);
        }
}

//show the traversals of a BST
void traversals(bst * x){
        cout << "In Order: ";
        inOrderPrint(x->root);
        cout << endl;
        cout << "Post Order: ";
        postOrderPrint(x->root);
        cout << endl;
        cout << "Pre Order: ";
        preOrderPrint(x->root);
        cout << endl << endl;
}

//Menu function to control operations
void menu(){
        int c = 0;
        node * s;
        int n = 10;
        int a[10] = { 30, 10, 45, 38, 20, 50, 25, 33, 8, 12 };
        bst * x = buildTree(a, n);
        char cont = '0';

        cout << "Enter Operation (q = quit, t = show traversals, h = height, d = delete, i = insert, s = search): ";
        while (cont != 'q'){
                if (cont != '0') cout << "Enter Operation (q, t, h, d, i, s): ";
                cin >> cont;

                if (cont == 't'){
                        traversals(x);
                }
                if (cont == 'h'){
                        c = height(x->root) - 1;
                        cout << "Height of BST: " << c << endl << endl;
                }
                if (cont == 'd'){
                        cout << "Enter value to delete: ";
                        cin >> c;
                        deleteNode(x, c);
                        traversals(x);
                }
                if (cont == 'i'){
                        cout << "Enter value to insert: ";
                        cin >> c;
                        insert(x, c);
                        traversals(x);
                }
                if (cont == 's'){
                        cout << "Enter value to search for: ";
                        cin >> c;
                        s = search(x->root, c);
                        if (s != NULL) cout << c << " found in memory location " << s << " with value " << s->key << endl << endl;
                        else cout << c << " not found, NULL pointer" << endl << endl;
                }
        }
}
admiral% make -f bjh3A.mak
g++ -c bjh3A.cpp
g++ -o bjh3A bjh3A.o
admiral% bjh3A
Enter Operation (q = quit, t = show traversals, h = height, d = delete, i = insert, s = search): t
In Order: 8 10 12 20 25 30 33 38 45 50 
Post Order: 8 12 25 20 10 33 38 50 45 30 
Pre Order: 30 10 8 20 12 25 45 38 33 50 

Enter Operation (q, t, h, d, i, s): h
Height of BST: 3

Enter Operation (q, t, h, d, i, s): s
Enter value to search for: 38
Search: 30 -> 45 -> 38
38 found in memory location 0x22fa8 with value 38

Enter Operation (q, t, h, d, i, s): s
Enter value to search for: 9
Search: 30 -> 10 -> 8 -> 
9 not found, NULL pointer

Enter Operation (q, t, h, d, i, s): d
Enter value to delete: 10
In Order: 8 12 20 25 30 33 38 45 50 
Post Order: 8 25 20 12 33 38 50 45 30 
Pre Order: 30 12 8 20 25 45 38 33 50 

Enter Operation (q, t, h, d, i, s): q
admiral% ^D
script done on Wed Nov 25 12:13:52 2015
